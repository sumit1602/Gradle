

apply plugin: 'java'


version ="1.0"

repositories {
    mavenCentral()
}

task hello{
    println "Helloji"
}
task greet{
    println "Welcome Mr. X"
}

task intro(dependsOn: hello){
    println "sfghjkl"
}
task intro1(dependsOn: greet){
    println "sfghjkl"
}
//task runMe(type: JavaExec, dependsOn: 'classes'){
//    main = "com.ttn.Application"
//    classpath = sourceSets.main.runtimeClasspath
//}
//task jar1 (type : Jar){
//    from sourceSets.main.output
//}


//QUESTION 1
// Look up java plugin documentation. Make changes in manifest to make it executable with correct class.
// When run using java -jar JAR_NAME_HERE the output should be text "Hello World" on the console.

jar {
    manifest {
        attributes 'Main-Class': 'com.ttn.jar'
    }
}
//Q2. Look up idea plugin. make changes in build.
// gradle so that the sources of src/main/java as well as src/main/java2 are taken as sources.
// Ensure that when you make JAR file class files in both are added to the JAR. 
// This will teach you how projects with non-conventional structure can be used with gradle.

apply plugin: 'java'
apply plugin: 'idea'


sourceSets {
    main {
        java {
            srcDirs = ['src/main/java','src/main/java2']
        }
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.ttn.Employee'
        )
    }
}

//Q3  add 2 files file1.xml and file1.txt in src/main/resources manually. 
// make changes so that when creating jar only file1.xml is added to the jar.


apply plugin: 'java'
apply plugin: 'idea'


sourceSets{
    main{
        java{
            srcDirs =['src/main/java','src/main/Java2']
        }
        resources{
            srcDirs =['src/main/resources']
            exclude "file1.txt"
        }
    }
}
//Q4  find how to make  is an uberjar. 
// Make changes so you can use commons lang3 StringUtil in your jar.
// Make this uber jar executable. 
//The output should be text but that should be using the StringUtils class of commons lang3.

//1st method :: using jar task from the java plugin
jar {
    manifest {
        attributes "Main-Class": "com.baeldung.fatjar.Application"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


//2nd method -- creating a separate task

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.baeldung.fatjar.Application'
    }
    baseName = 'all-in-one-jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


//3rd method-- Using dedicated plugins
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

//Q5 Find a maven repository and add it as a repository. You can use bintray, jcenter.


        repositories {
            mavenCentral()
            maven { url "https://repo.maven.apache.org/maven2/" }
            jcenter()
        }
//Q6 Write a task in file "mytasks.gradle" and use it in your build.gradle.


//Make a file know as myTask,gradle

task myTask{
    println "Hello world !!!"
}

//To run : Executed the gradle file
apply plugin: 'java'
apply from : 'myTask.gradle'


//In gradle file
        sourceSets {
            main {
                resources{
                    srcDirs=['scr/main/resources']
                    exclude 'file.txt'
                }
            }
        }
jar {
    manifest {
        into 'resources', {
            from 'resources'
        }
    }
}


